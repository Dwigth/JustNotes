(function () { function t(e, n, i) { function o(s, a) { if (!n[s]) { if (!e[s]) { var l = "function" == typeof require && require; if (!a && l) return l(s, !0); if (r) return r(s, !0); var c = new Error("Cannot find module '" + s + "'"); throw c.code = "MODULE_NOT_FOUND", c } var d = n[s] = { exports: {} }; e[s][0].call(d.exports, function (t) { var n = e[s][1][t]; return o(n || t) }, d, d.exports, t, e, n, i) } return n[s].exports } for (var r = "function" == typeof require && require, s = 0; s < i.length; s++)o(i[s]); return o } return t })()({ 1: [function (t, e, n) { "use strict"; Object.defineProperty(n, "__esModule", { value: !0 }); class i { constructor() { this.AlertElement = document.querySelector("#error-message") } showAlert(t) { this.AlertElement.style.visibility = "visible", this.AlertElement.children[0].textContent = t, setTimeout(() => { this.AlertElement.style.visibility = "hidden" }, 3e3) } } i.instance = void 0, n.AlertController = i }, {}], 2: [function (t, e, n) { "use strict"; var i = this && this.__awaiter || function (t, e, n, i) { return new (n || (n = Promise))(function (o, r) { function s(t) { try { l(i.next(t)) } catch (t) { r(t) } } function a(t) { try { l(i.throw(t)) } catch (t) { r(t) } } function l(t) { t.done ? o(t.value) : new n(function (e) { e(t.value) }).then(s, a) } l((i = i.apply(t, e || [])).next()) }) }; Object.defineProperty(n, "__esModule", { value: !0 }); const o = t("../config/config"); class r { constructor() { } static POST(t, e) { return i(this, void 0, void 0, function* () { return yield fetch(o.URL + e, { method: "POST", body: JSON.stringify(t), headers: o.header }).then(t => t.json()).catch(t => t).then(t => t) }) } static GET(t) { return i(this, void 0, void 0, function* () { return yield fetch(o.URL + t, { method: "GET", headers: o.header }).then(t => t.json()).catch(t => t).then(t => t) }) } } n.HTTPController = r }, { "../config/config": 6 }], 3: [function (t, e, n) { "use strict"; var i = this && this.__awaiter || function (t, e, n, i) { return new (n || (n = Promise))(function (o, r) { function s(t) { try { l(i.next(t)) } catch (t) { r(t) } } function a(t) { try { l(i.throw(t)) } catch (t) { r(t) } } function l(t) { t.done ? o(t.value) : new n(function (e) { e(t.value) }).then(s, a) } l((i = i.apply(t, e || [])).next()) }) }; Object.defineProperty(n, "__esModule", { value: !0 }); const o = t("./vista.controller"), r = t("../services/notas.service"), s = t("./alert.controllert"); class a { constructor() { this.notas = [], this.ITitulo = document.getElementById("ITitulo"), this.IContenido = document.getElementById("IContenido"), this.IContenedor = document.getElementById("IContenedor"), this.IConfirmacion = document.getElementById("IConfirmacion"), this.ILista = document.getElementById("ILista"), this.IBusqueda = document.getElementById("busqueda"), a.Modal = document.getElementById("modal"), a.IRefresh = document.getElementById("IRefresh"), this.IConfirmacion.addEventListener("click", () => { this.save(), this.afterClickIContenido("none") }), this.IContenido.addEventListener("click", () => { this.afterClickIContenido("initial") }), this.IBusqueda.addEventListener("keyup", () => { this.search(this.IBusqueda.value) }), this.afterClickIContenido("none"), this.displayNotas(), a.IRefresh.addEventListener("click", () => { this.refresh() }) } displayNotas() { return i(this, void 0, void 0, function* () { let t = yield r.NotasService.obtenerNotas(); console.log(t); let e = new s.AlertController; null == t.data ? e.showAlert("Ha habido un error") : e.showAlert(t.msg); let n = null != t.data ? Array.from(t.data) : []; this.notas = n; new o.VistaController(this.notas).render(this.IContenedor) }) } getITitulo() { return null != this.ITitulo ? this.ITitulo.value : "Objeto es nulo" } getIContenido() { return null != this.IContenido ? this.IContenido.value : "Objeto es nulo" } afterClickIContenido(t) { this.ITitulo.style.display = t, this.IConfirmacion.style.display = t, this.ILista.style.display = t } save() { let t = new Date, e = t.getFullYear() + "-" + (t.getMonth() + 1) + "-" + t.getDate() + " " + t.getHours() + ":" + t.getMinutes() + ":" + t.getSeconds(); console.log(e); var n = { titulo: this.getITitulo(), contenido: this.getIContenido(), id_usuario: 1, lista: !1, fecha_creacion: e, fecha_modificacion: e }; "" !== n.contenido && r.NotasService.agregarNota(n).finally(() => { new o.VistaController(this.notas).render(this.IContenedor); this.clean(), this.displayNotas() }) } clean() { this.ITitulo.value = "", this.IContenido.value = "" } refresh() { a.IRefresh.classList.add("refresh"), this.displayNotas().finally(() => a.IRefresh.classList.remove("refresh")) } static spin(t) { t ? this.IRefresh.classList.add("refresh") : a.IRefresh.classList.remove("refresh") } search(t) { return i(this, void 0, void 0, function* () { if ("" != t) { let e = yield r.NotasService.buscarNota(t).catch(t => t); new o.VistaController(e.data).render(this.IContenedor) } else this.displayNotas() }) } } n.InputController = a }, { "../services/notas.service": 7, "./alert.controllert": 1, "./vista.controller": 4 }], 4: [function (t, e, n) { "use strict"; var i = this && this.__awaiter || function (t, e, n, i) { return new (n || (n = Promise))(function (o, r) { function s(t) { try { l(i.next(t)) } catch (t) { r(t) } } function a(t) { try { l(i.throw(t)) } catch (t) { r(t) } } function l(t) { t.done ? o(t.value) : new n(function (e) { e(t.value) }).then(s, a) } l((i = i.apply(t, e || [])).next()) }) }; Object.defineProperty(n, "__esModule", { value: !0 }); const o = t("./input.controller"), r = t("../services/notas.service"), s = t("./alert.controllert"); class a { constructor(t) { this.colors = ["FF637D", "F4F1BB", "66D7D1", "EAF2E3", "FFF87F", "FFFFFF"], this.opts = ["Agregar etiqueta", "Mostrar lista", "Eliminar"], this.notas = t } setNotas(t) { this.notas = t } render(t) { this.cardContainer = t, this.backdrop = document.getElementById("backdrop"); const e = document.getElementById("tags-list"); t.innerHTML = "", e.innerHTML = "", t.classList.add("grid"), this.notas.forEach(e => { const n = this.cardBuilder(e); t.append(n) }), this.Masonry = new Masonry(".grid", { itemSelector: ".nota-card", columnWidth: 20 }), this.loadEtiquetas(e) } cardBuilder(t) { let e = null; const n = new s.AlertController, a = document.createElement("div"); a.classList.add("nota-card", "cursor"), a.id = `card_${t.id_nota}`, null != t.color && (a.style.backgroundColor = "#" + t.color, a.classList.add("nota-card-color")); const l = document.createElement("div"), c = document.createElement("div"), d = document.createElement("div"), u = document.createElement("div"), h = document.createElement("div"), v = document.createElement("div"), m = document.createElement("div"), f = document.createElement("div"), p = document.createElement("i"), y = document.createElement("i"); return l.textContent = t.titulo, "" == t.titulo ? l.innerHTML = "<br>" : l.textContent = t.titulo, "" == t.contenido ? c.innerHTML = "<br>" : c.textContent = t.contenido, p.textContent = "color_lens", y.textContent = "more_vert", l.classList.add("nota-card-header"), c.classList.add("nota-card-content"), d.classList.add("nota-card-footer", "row"), u.classList.add("u-full-width"), v.classList.add("colors_dropdown"), m.classList.add("more_dropdown", "more_list"), h.classList.add("six", "columns"), p.classList.add("material-icons", "cursor"), y.classList.add("material-icons", "cursor"), f.classList.add("six", "columns"), h.append(v, p), f.append(m, y), u.append(h, f), d.appendChild(u), this.colors.forEach(e => { const i = document.createElement("div"); i.classList.add("circle"), i.style.backgroundColor = "#" + e, i.addEventListener("click", () => { console.log(e), a.style.backgroundColor = "#" + e, v.style.visibility = "hidden", o.InputController.spin(!0), t.color = e, r.NotasService.editarNota(t).then(t => { t && n.showAlert(t.msg), o.InputController.spin(!1) }).catch(t => { t && n.showAlert("Ha ocurrido un error"), o.InputController.spin(!1) }) }), v.appendChild(i) }), p.addEventListener("mouseover", t => { v.style.visibility = "visible" }), v.addEventListener("mouseleave", t => { v.style.visibility = "hidden" }), this.opts.forEach((e, n) => { const o = document.createElement("div"); o.classList.add("more_list-item"), o.textContent = e, o.addEventListener("click", () => { m.style.visibility = "hidden" }), o.addEventListener("mouseover", t => { o.style.backgroundColor = "rgba(0,0,0,0.05)" }), o.addEventListener("mouseleave", t => { o.style.backgroundColor = "rgba(0,0,0,0)" }), 2 == n && o.addEventListener("click", () => i(this, void 0, void 0, function* () { yield r.NotasService.eliminarNota(t.id_nota).then(t => i(this, void 0, void 0, function* () { a.style.display = "none", this.notas = [], this.notas = yield r.NotasService.obtenerNotas().then(t => t.data).catch(t => t), console.log(this.notas) })).catch(t => t).finally(() => { this.render(this.cardContainer) }) })), m.appendChild(o) }), y.addEventListener("click", () => { console.log("more"), m.style.visibility = "visible" }), l.addEventListener("click", () => { console.log("Carta ", t.id_nota), a.classList.add("nota-click"), l.contentEditable = "true", this.backdrop.style.visibility = "visible" }), c.addEventListener("click", () => { a.classList.add("nota-click"), c.contentEditable = "true", this.backdrop.style.visibility = "visible" }), l.addEventListener("keydown", n => { t.titulo = l.textContent, console.log(l.textContent), clearTimeout(e), e = setTimeout(() => { r.NotasService.editarNota(t) }, 1e3) }), c.addEventListener("keyup", n => { t.contenido = c.textContent, clearTimeout(e), e = setTimeout(() => { r.NotasService.editarNota(t) }, 1e3) }), this.backdrop.addEventListener("click", () => { a.classList.remove("nota-click"), this.backdrop.style.visibility = "hidden", o.InputController.Modal.style.visibility = "hidden", this.Masonry.reloadItems() }), a.append(l, c, d), a } labelsBuilder(t, e) { const n = document.createElement("div"); n.classList.add("tag-element"); const i = document.createElement("i"); if (i.classList.add("material-icons-outlined"), i.textContent = "label", n.append(i), e) { const e = document.createElement("div"); e.textContent = t.nombre, n.appendChild(e) } else n.setAttribute("data-value", t.nombre); return n } loadEtiquetas(t) { return i(this, void 0, void 0, function* () { o.InputController.Modal.innerHTML = ""; const e = document.createElement("div"); e.classList.add("tag-element"), e.textContent = "Etiquetas"; const n = document.createElement("div"); n.classList.add("tag-element"); const s = document.createElement("i"); s.classList.add("material-icons-outlined"), s.textContent = "edit", n.appendChild(s), n.setAttribute("data-value", "Editar etiqueta"), n.addEventListener("click", () => i(this, void 0, void 0, function* () { this.backdrop.style.visibility = "visible", o.InputController.Modal.style.visibility = "visible" })), t.appendChild(e); const a = document.createElement("input"); a.classList.add("input-grey"), a.placeholder = "¡Crea una nueva etiqueta!", a.style.padding = "10px", a.style.borderRadius = "4px"; const l = document.createElement("ul"); this.etiquetas = yield r.NotasService.etiquetasUsuario(1).then(t => t.data.etiquetas).catch(t => t), this.etiquetas.forEach(e => { const n = this.labelsBuilder(e); t.appendChild(n); const i = document.createElement("li"); i.appendChild(this.labelsBuilder(e, !0)); let o = i.children[0].children[1]; o.addEventListener("click", () => { o.contentEditable = "true" }), l.appendChild(i) }), o.InputController.Modal.append(a, l), t.appendChild(n), a.addEventListener("keyup", t => { if ("Enter" == t.key) { const t = { nombre: a.value, id_usuario: 1 }, e = this.labelsBuilder(t, !0); l.appendChild(e), a.value = "" } }) }) } } n.VistaController = a }, { "../services/notas.service": 7, "./alert.controllert": 1, "./input.controller": 3 }], 5: [function (t, e, n) { "use strict"; Object.defineProperty(n, "__esModule", { value: !0 }); const i = t("./actions/input.controller"); new i.InputController }, { "./actions/input.controller": 3 }], 6: [function (t, e, n) { "use strict"; Object.defineProperty(n, "__esModule", { value: !0 }), n.URL = "https://localhost:80", n.header = { "Content-Type": "application/json" } }, {}], 7: [function (t, e, n) { "use strict"; var i = this && this.__awaiter || function (t, e, n, i) { return new (n || (n = Promise))(function (o, r) { function s(t) { try { l(i.next(t)) } catch (t) { r(t) } } function a(t) { try { l(i.throw(t)) } catch (t) { r(t) } } function l(t) { t.done ? o(t.value) : new n(function (e) { e(t.value) }).then(s, a) } l((i = i.apply(t, e || [])).next()) }) }; Object.defineProperty(n, "__esModule", { value: !0 }); const o = t("../actions/http.controller"); class r { constructor() { } static obtenerNotas() { return i(this, void 0, void 0, function* () { return yield o.HTTPController.GET("/notas/obtener") }) } static agregarNota(t) { return i(this, void 0, void 0, function* () { return yield o.HTTPController.POST(t, "/notas/agregar").then(t => (console.log(t), t)).catch(t => console.error(t)) }) } static editarNota(t) { return i(this, void 0, void 0, function* () { return yield o.HTTPController.POST(t, "/notas/editar").then(t => t).catch(t => console.error(t)) }) } static buscarNota(t) { return i(this, void 0, void 0, function* () { return yield o.HTTPController.POST({ busqueda: t }, "/notas/buscar").then(t => t).catch(t => console.error(t)) }) } static etiquetasUsuario(t) { return i(this, void 0, void 0, function* () { return yield o.HTTPController.POST({ id: t }, "/usuario/etiquetas").then(t => t).catch(t => console.error(t)) }) } static eliminarNota(t) { return i(this, void 0, void 0, function* () { return yield o.HTTPController.POST({ id_nota: t }, "/notas/eliminar").then(t => t).catch(t => console.error(t)) }) } } n.NotasService = r }, { "../actions/http.controller": 2 }] }, {}, [5]);